<style type="text/css">
.right {   text-align: right;   }
.center {  text-align: center; }

.red {   color: red;  }
.green { color: green; }
</style>

<div class="intro">
    <p>Example demonstrates how to progressively "improve" a DataTable using custom formatters, calculated columns and custom sorting functions.</p>
</div>

<h2>Assignment : Displaying a Stock Portfolio in a datatable</h2>

<p>Our initial assignment is to create a usable DataTable representing a Stock Portfolio where we have been given a sample array of data from the database folks.  The data has the following format;
```
var portfolio = [
	{ stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
	{ stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
	{ stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
	{ stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
	{ stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
];
```
where the `qty` property is the number of shares owned, `cost` is the total cost when the shares were purchased and `price` is the current market trading price.</p>

<h3 id="dt_basic">First Attempt - Basic datatable</h3>

<p>Our initial attempt is simply to display the results in a simple datatable, without any fancy formatting, using the following code;</p>

```
YUI().use('datatable', function (Y) {

    var portfolio = [
        { stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
        { stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
        { stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
        { stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
        { stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
    ];

    var cols0 = [
        { key:"stock_id",label:"Stock ID" },        
        { key:"ticker",  label:"Ticker" },        
        { key:"company", label:"Company Name" },        
        { key:"qty",     label:"Share Qty" },        
        { key:"cost",    label:"Purchase Cost" },        
        { key:"price",   label:"Stock Price" }
    ];
        
    var dt0 = new Y.DataTable({
        columns: cols0,
        data: 	 portfolio
    }).render("#dtable-basic");        
});
```
which produces the following table;

<div id="dtable_basic" class="yui3-skin-sam"></div>

<script>
YUI().use('datatable', function (Y) {

	var portfolio = [
		{ stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
		{ stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
		{ stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
		{ stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
		{ stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
	];

    
    var cols0 = [
        { key:"stock_id",label:"Stock ID" },        
        { key:"ticker",  label:"Ticker" },        
        { key:"company", label:"Company Name" },        
        { key:"qty",     label:"Share Qty" },        
        { key:"cost",    label:"Purchase Cost" },        
        { key:"price",   label:"Stock Price" }
    ];
        
    var dt0 = new Y.DataTable({
        columns: cols0,
        data: 	 portfolio
    }).render("#dtable_basic");        
});
</script>

<p>We proudly march in and display this work of beauty to our boss. Well let's just say she is a little underwhelmed at our creation. "These numbers need to be sortable!  Can't you just show the Market Value?  Don't we always right-align columns here?  etc…".   So we plan for a little re-design</p>

<h3 id="dt_update">First Update - Initial Column Formatting and Sorting</h3>

<p>After reviewing the data, and now knowing a little more what the boss is looking for.  We consider that the `stock_id` doesn't really provide meaningful info so we can drop that.  Also, for this go around we will calculate the "market value" of each stock position and display that as `qty * price` which will be shown in a calculated only column (i.e. one not based specifically on a single member of the data).</p>

<p>The column formatter includes a single object argument `o` that includes (among many other items) the data for the record as `o.data`.   So we write a column formatter for a new calculated column with `name:"mvalue"`.  Also in order to define right-aligned numbers we set a CSS class as `.right{ text-align:right;}` and assign that to the `className` column configuration.  Our next version of this datatable, including defining sortable columns, is codes as;</p>

```
YUI().use('datatable', function (Y) {

    var portfolio = [
        { stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
        { stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
        { stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
        { stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
        { stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
    ];

    var cols1 = [
        { key:"ticker",  label:"Ticker" },        
        { key:"company", label:"Company Name" },        
        { key:"qty",     label:"Share Qty", className:"right" },        
        { key:"cost",    label:"Purchase Cost", className:"right" },        
        { name:"mvalue", label:"Market Value",
          formatter: function(o) {
             o.className += " right";
             return o.data.qty * o.data.price;
          }
         }
    ];
        
    var dt1 = new Y.DataTable({
        columns:  cols1,
        data: 	  portfolio,
        sortable: true
    }).render("#dtable_update");        

});
```
<p>which gives us the following updated version of a our datatable;</p>

<div id="dtable_update" class="yui3-skin-sam"></div>
 
<script>
YUI().use('datatable', function (Y) {

	var portfolio = [
		{ stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
		{ stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
		{ stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
		{ stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
		{ stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
	];

    var cols1 = [
        { key:"ticker",  label:"Ticker" },        
        { key:"company", label:"Company Name" },        
        { key:"qty",     label:"Share Qty", className:"right" },        
        { key:"cost",    label:"Purchase Cost", className:"right" },        
        { name:"mvalue", label:"Market Value",
          formatter: function(o) {
             o.className += " right";
             return o.data.qty * o.data.price;
          }
         }
    ];
        
    var dt1 = new Y.DataTable({
        columns:  cols1,
        data: 	  portfolio,
        sortable: true
    }).render("#dtable_update");        

});
</script>

<p>Now we approach the boss, a little more confidently, and ask if this is closer to what is desired.  "Looks much better, good job.  Hey, can you display the currency-related items as formatted dollars?   And, the client called and requested to display the Gain or Loss in dollars and percentages with colors for gains and losses, can you add that?   Oops, the market value sorting doesn't work, please fix that …".</p>

<p>We're getting closer, but not quite there.   This time let's put full thought into doing this job perfectly on the next attempt.</p>


<h3 id="dt_final">Final Version - Custom Formatters and Custom Sorting</h3>

<p>In order to display the currency items in columns `cost` and `mvalue` we can simply define a custom formatter that uses the <a href="../datatype/index.html#formattingnumbers">DataType-Number-format Utility</a> methods.   This client prefers a US currency format displaying $ and two decimals.  Since we know we will be displaying several currency items we define a utility function as (which requires the "datatype-number" module included in our YUI().use() statement);</p>
```
function fmtCurrency$2 (val) {
    return Y.DataType.Number.format( val, { prefix:"$ ",
       thousandsSeparator: ",",  decimalSeparator: ".",  decimalPlaces: 2
    });
}
```

<p>To provide the "Gain or Loss" for each position, we will have to compute that as `price * qty - cost`.  Additionally, to calculate the "Percent Gain or Loss" that is slightly more involved as `( price * qty - cost ) / cost`, but we have to look out for situations where cost is zero to avoid a division by zero.  We will use these formulas within our column formatters.  The display value from the formatter can either be defined as the return value or by assigning to the `o.value` property.</p>

<p>We can use our formatter not only to calculate the value displayed, but we can also assign the right-aligned CSS class within the formatter.  The formatter argument object has a `o.className` member that we can simply append our desired class to.  Additionally, define two classes as `red` (for currency amounts less than zero)  and `green` for currency amounts greater than zero.</p>

<p>So at this point we can define a few column formatters, where some use our `fmtCurrency$2` function above as;</p>

```
// Column formatter to display right-aligned in $ with comma and 2 decimals
function currency2(o) {
    o.className += ' right';
    return fmtCurrency$2(o.value);
}

// formatter to display Market Value, right-aligned in our currency
function fmtMktValue(o) {
    o.className += ' right';
    var mvalue = o.data.price * o.data.qty ;
    return fmtCurrency$2( mvalue );
}

// formatter to calculate the Gain or Loss, right-aligned in our currency and colorized
function fmtGL(o) {
    var gl_value = o.data.qty * o.data.price - o.data.cost;
    o.value = fmtCurrency$2(gl_value);
    o.className += ' right';
    o.className += ( gl_value<0 ) ? ' red' : ' green';	 // toggle color if loss or gain
}

// formatter to calculate the Gain or Loss as percent of Cost, formatted as % and colorized
function fmtGLperc(o) {
    if ( o.data.cost > 0 ) {
       var glp_value = 100 * (o.data.qty * o.data.price - o.data.cost) / o.data.cost;
       o.value = fmtCurrency$2( glp_value, {suffix:' %', prefix:'' });
       o.className += ( glp_value<0 ) ? ' red' : ' green';
    } else {
       o.value = "n/a";
    }
}
```

<p>Fixing the column sorting will require more effort.  Datatable doesn't "know" how to sort a calculated column, because it doesn't know the data type (i.e. string, numeric, etc..).  This will require defining custom sort functions for each of the calculated fields for Market Value `mvalue`, Gain or Loss `gl` and the Gain or Loss percent as `glperc`.  The user guide gives a good description of a <a href="../datatable/index.html#customsort">Custom Sort Function</a> so we will refer to that.</p>

<p>The custom sort function which is assigned to a column using the `sortFn` column configuration requires three arguments `a,b,desc` where `a` and `b` are two values which are being compared, and `desc` is a boolean flag defining the direction of the sort, where `true` means descending.</p>

<p>The custom sort functions are given as;</p>

```
// sort function based on Market Value as "price * qty"
function sortMV(a, b, desc) {
    var new_a  = a.get('price')*a.get('qty'),
        new_b  = b.get('price')*b.get('qty'),
        diff   = new_a-new_b;
    return desc ? -diff : diff;
}

// sort function based on Gain or Loss calculated as "price * qty - cost"
function sortGL(a, b, desc) {
    var gla  = a.get('qty')*a.get('price')-a.get('cost'),
        glb  = b.get('qty')*b.get('price')-b.get('cost'),
        gl_diff = gla-glb;
    return desc ? -gl_diff : gl_diff;
}

// sort function based on Gain or Loss Percent calculated as "(price * qty - cost) / cost"
function sortGLperc(a, b, desc) {
    var glp_a  = (a.get('cost')>0) ? (a.get('qty')*a.get('price')-a.get('cost'))/a.get('cost') : 0,
        glp_b  = (b.get('cost')>0) ? (b.get('qty')*b.get('price')-b.get('cost'))/b.get('cost') : 0,
        glp_diff = glp_a - glp_b;
    return desc ? -glp_diff : glp_diff;
}
```

<p>We are now confident that the custom formatters and sorters are setup properly, and we apply them in our final datatable as;</p>

```
var portfolio = [
    { stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
    { stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
    { stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
    { stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
    { stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
];

var cols2 = [
    { key:"ticker",  label:"Ticker", sortable:true },        
    { key:"company", label:"Company Name", sortable:true },        
    { key:"qty",     label:"Share Qty", className:"right" },        
    { key:"cost",    label:"Purchase Cost", sortable:true, formatter:currency2, className:"right" },        
    { name:"mvalue", label:"Market Value",  sortable:true, sortFn:sortMV, formatter:fmtMktValue },
    { name:"gl",  	 label:"Gain or Loss",  sortable:true, sortFn:sortGL, formatter:fmtGL },
    { name:"glperc", label:"% Gain or Loss",sortable:true, sortFn:sortGLperc, formatter:fmtGLperc },
];
    
var dt2 = new Y.DataTable({
    columns: cols2,
    data: 	 portfolio,
}).render("#dtable_final");        

// Initially show the datatable sorted by column named "gl" in descending order
dt2.sort({ gl:'desc' });            
```

<p>With the final portfolio datatable as;</p>

<div id="dtable_final" class="yui3-skin-sam"></div>
 
<script>
YUI().use( 'datatable', 'datatype-number', function (Y) {

	var portfolio = [
		{ stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
		{ stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
		{ stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
		{ stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
		{ stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
	];
	
	var cols2 = [
	    { key:"ticker",  label:"Ticker", sortable:true },        
	    { key:"company", label:"Company Name", sortable:true },        
	    { key:"qty",     label:"Share Qty", className:"right" },        
	    { key:"cost",    label:"Purchase Cost", sortable:true, formatter:currency2, className:"right" },        
	    { name:"mvalue", label:"Market Value",  sortable:true, sortFn:sortMV, formatter:fmtMktValue },
	    { name:"gl",  	 label:"Gain or Loss",  sortable:true, sortFn:sortGL, formatter:fmtGL },
	    { name:"glperc", label:"% Gain or Loss",sortable:true, sortFn:sortGLperc, formatter:fmtGLperc },
	];
	    
	var dt2 = new Y.DataTable({
	    columns: cols2,
	    data: 	 portfolio,
	}).render("#dtable_final");        
	
	// Initially show the datatable sorted by column named "gl" in descending order
	dt2.sort({ gl:'desc' });            

});
</script>

<p>Our client responds very positively to the portfolio display, and our boss is very pleased with our work!</p>

<h2>Complete Example Source</h2>

<h4>CSS Styles</h4>
```
.right {   text-align: right;   }
.center {  text-align: center; }

.red {   color: red;  }
.green { color: green; }
```

<h4>HTML markup</h4>
```
<body class="yui3-skin-sam">

<br/>Basic Table:
<div id="dtable_basic" class="yui3-skin-sam"></div>

<br/>Updated Table:
<div id="dtable_update" class="yui3-skin-sam"></div>

<br/>Final Table:
<div id="dtable_final" class="yui3-skin-sam"></div>

</body>
```


<h4>Javascript Source</h4>

```
YUI().use( 'datatable', 'datatype-number', function (Y) {

    var portfolio = [
        { stock_id:3,  ticker:"XYZEE", company:"XYZ Corporation", qty:300, cost:4500, price:15.83 },
        { stock_id:11, ticker:"FUBAR", company:"FooBar Computers, Inc.", qty:100, cost:2187, price:28.90 },
        { stock_id:17, ticker:"GIFT",  company:"Spinoff Technology", qty:400, cost:0, price:4.11 },
        { stock_id:19, ticker:"DOLLARS", company:"Consultants 'R Us", qty:1750, cost:6099.13, price:3.97 },
        { stock_id:5,  ticker:"SAFET", company:"Stability Partners LLP", qty:25, cost:7283.41, price:58.74 }
    ];
	
// -- Basic version of our DataTable --
	
    var cols0 = [
        { key:"stock_id",label:"Stock ID" },        
        { key:"ticker",  label:"Ticker" },        
        { key:"company", label:"Company Name" },        
        { key:"qty",     label:"Share Qty" },        
        { key:"cost",    label:"Purchase Cost" },        
        { key:"price",   label:"Stock Price" }
    ];
        
    var dt0 = new Y.DataTable({
        columns: cols0,
        data: 	 portfolio
    }).render("#dtable_basic");    	


// -- Updated version of our DataTable --

    var cols1 = [
        { key:"ticker",  label:"Ticker" },        
        { key:"company", label:"Company Name" },        
        { key:"qty",     label:"Share Qty", className:"right" },        
        { key:"cost",    label:"Purchase Cost", className:"right" },        
        { name:"mvalue", label:"Market Value",
          formatter: function(o) {
             o.className += " right";
             return o.data.qty * o.data.price;
          }
         }
    ];
        
    var dt1 = new Y.DataTable({
        columns:  cols1,
        data: 	  portfolio,
        sortable: true
    }).render("#dtable_update");        


	
// -- Final version of our DataTable --
	
	//
	// CUSTOM FORMATTERS - These need to be defined "before" assigning them in the Columns object!
	//
	
	function fmtCurrency$2 (val) {
	    return Y.DataType.Number.format( val, { prefix:"$ ",
	       thousandsSeparator: ",",  decimalSeparator: ".",  decimalPlaces: 2
	    });
	}	

	// Column formatter to display right-aligned in $ with comma and 2 decimals
	function currency2(o) {
	    o.className += ' right';
	    return fmtCurrency$2(o.value);
	}
	
	// formatter to display Market Value, right-aligned in our currency
	function fmtMktValue(o) {
	    o.className += ' right';
	    var mvalue = o.data.price * o.data.qty ;
	    return fmtCurrency$2( mvalue );
	}
	
	// formatter to calculate the Gain or Loss, right-aligned in our currency and colorized
	function fmtGL(o) {
	    var gl_value = o.data.qty * o.data.price - o.data.cost;
	    o.value = fmtCurrency$2(gl_value);
	    o.className += ' right';
	    o.className += ( gl_value<0 ) ? ' red' : ' green';	 // toggle color if loss or gain
	}
	
	// formatter to calculate the Gain or Loss as percent of Cost, formatted as % and colorized
	function fmtGLperc(o) {
	    if ( o.data.cost > 0 ) {
	       var glp_value = 100 * (o.data.qty * o.data.price - o.data.cost) / o.data.cost;
	       o.value = fmtCurrency$2( glp_value, {suffix:' %', prefix:'' });
	       o.className += ( glp_value<0 ) ? ' red' : ' green';
	    } else {
	       o.value = "n/a";
	    }
	}
	
	//
	// CUSTOM SORT Functions - These need to be defined "before" assigning them in the Columns object!
	//

	// sort function based on Market Value as "price * qty"
	function sortMV(a, b, desc) {
	    var new_a  = a.get('price')*a.get('qty'),
	        new_b  = b.get('price')*b.get('qty'),
	        diff   = new_a-new_b;
	    return desc ? -diff : diff;
	}
	
	// sort function based on Gain or Loss calculated as "price * qty - cost"
	function sortGL(a, b, desc) {
	    var gla  = a.get('qty')*a.get('price')-a.get('cost'),
	        glb  = b.get('qty')*b.get('price')-b.get('cost'),
	        gl_diff = gla-glb;
	    return desc ? -gl_diff : gl_diff;
	}
	
	// sort function based on Gain or Loss Percent calculated as "(price * qty - cost) / cost"
	function sortGLperc(a, b, desc) {
	    var glp_a  = (a.get('cost')>0) ? (a.get('qty')*a.get('price')-a.get('cost'))/a.get('cost') : 0,
	        glp_b  = (b.get('cost')>0) ? (b.get('qty')*b.get('price')-b.get('cost'))/b.get('cost') : 0,
	        glp_diff = glp_a - glp_b;
	    return desc ? -glp_diff : glp_diff;
	}


	// Define the columns, assigning formatters and sorters from above ...
	
	var cols2 = [
	    { key:"ticker",  label:"Ticker", sortable:true },        
	    { key:"company", label:"Company Name", sortable:true },        
	    { key:"qty",     label:"Share Qty", className:"right" },        
	    { key:"cost",    label:"Purchase Cost", sortable:true, formatter:currency2, className:"right" },        
	    { name:"mvalue", label:"Market Value",  sortable:true, sortFn:sortMV, formatter:fmtMktValue },
	    { name:"gl",  	 label:"Gain or Loss",  sortable:true, sortFn:sortGL, formatter:fmtGL },
	    { name:"glperc", label:"% Gain or Loss",sortable:true, sortFn:sortGLperc, formatter:fmtGLperc },
	];
	    
	var dt2 = new Y.DataTable({
	    columns: cols2,
	    data: 	 portfolio,
	}).render("#dtable_final");        
	
	// Initially show the datatable sorted by column named "gl" in descending order
	dt2.sort({ gl:'desc' });            

});
```